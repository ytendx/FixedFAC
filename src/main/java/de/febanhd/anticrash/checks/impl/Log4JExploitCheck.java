package de.febanhd.anticrash.checks.impl;

import de.febanhd.anticrash.checks.AbstractCheck;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Appender;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.filter.AbstractFilter;
import org.apache.logging.log4j.core.filter.AbstractFilterable;
import org.bukkit.Bukkit;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class Log4JExploitCheck extends AbstractCheck {

    private static final Pattern PATTERN = Pattern.compile(".*\\$\\{[^}]*\\}.*");

    public Log4JExploitCheck() {
        super("Log4J Exploit Check");
        Logger logger = plugin.getLogger();

        plugin.getServer().getPluginManager().registerEvents(new Listener() {

            @EventHandler
            public void handleMessage(AsyncPlayerChatEvent chatEvent){
                if(chatEvent.getMessage().toLowerCase().contains("${jndi:ldap") || chatEvent.getMessage().toLowerCase().contains("${jndi")
                        || chatEvent.getMessage().toLowerCase().contains("ldap")){
                    sendInvalidPacketWarning(chatEvent.getPlayer(), "Tryed to exploit Log4J via chat");
                    chatEvent.setCancelled(true);
                }
            }

            @EventHandler
            public void handleCommand(PlayerCommandPreprocessEvent event){
                if(event.getMessage().toLowerCase().contains("${jndi:ldap") || event.getMessage().toLowerCase().contains("${jndi")
                        || event.getMessage().toLowerCase().contains("ldap")){
                    sendInvalidPacketWarning(event.getPlayer(), "Tryed to exploit Log4J via command");
                    event.setCancelled(true);
                }
            }
        }, plugin);

        try {
            this.applyAppenders();
            logger.info("Successfully applied filters to all Appenders! (Log4J Fix)");
        } catch (Exception exception) {
            logger.warning("Failed to add Log4J Appenders (LoggerFilter) to Logger. (Incompatible Logger version)!");
        }
    }

    private void applyAppenders() {
        Map appenders = ((org.apache.logging.log4j.core.Logger)(LogManager.getRootLogger())).getAppenders();
        LoggerFilter filter = new LoggerFilter();
        List<Appender> filterable = (List<Appender>) appenders.values().stream().filter(appender -> appender instanceof AbstractFilterable).collect(Collectors.toList());
        filterable.forEach(appender -> ((AbstractFilterable)(appender)).addFilter(filter));
    }

    private static class LoggerFilter
            extends AbstractFilter {
        private LoggerFilter() {
        }

        public Result filter(LogEvent event) {
            String message = event.getMessage().getFormattedMessage();
            if (message.indexOf(36) != -1 && PATTERN.matcher(message.toLowerCase()).find()) {
                Bukkit.getConsoleSender().sendMessage("Server blocked Log4J Exploit try succesfully via Log Filter.");
                return Result.DENY;
            }
            return super.filter(event);
        }
    }
}
